#!/usr/bin/env python3

# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Finds an audible CD ripping bug in an audio collection.

Some of my music collection has an issue where a brief section (~250ms) from the
beginning of track n also appears at the end of track n-1. I think it's probably
from a bug in sound-juicer at some point, but I haven't looked into it.
Re-ripping with different software seems to fix the issue. This script tries to
find files with that issue, where the repeated audio isn't just silence.

Assumptions:
    * Filenames sort in the same order as tracks.
    * All files on the same disc are also in the same directory.
"""

from collections.abc import Collection, Iterable
from concurrent import futures
import os
import pathlib
import sys

import numpy as np
import soundfile

_AUDIO_SUFFIXES = (".flac",)

# Number of frames to test at the end of track n-1.
_FRAMES_AT_END = int(44100 * 0.1)

# Number of frames to test at the beginning of track n.
_FRAMES_AT_BEGINNING = int(44100 * 2.5)

_SILENCE_MAX_PEAK = 2e-4


def _scan_dir(
    dirpath: pathlib.Path,
    filenames: Collection[str],
) -> Iterable[str]:
    tracks = [f for f in sorted(filenames) if f.endswith(_AUDIO_SUFFIXES)]
    errors = []
    for track1, track2 in zip(tracks, tracks[1:], strict=False):
        try:
            with soundfile.SoundFile(dirpath / track1, mode="r") as f:
                if f.frames < _FRAMES_AT_END:
                    continue
                f.seek(-_FRAMES_AT_END, os.SEEK_END)
                data1 = f.read()
                if np.all(np.less_equal(np.abs(data1), _SILENCE_MAX_PEAK)):
                    continue
        except soundfile.SoundFileError as e:
            errors.append(f'{e}: {dirpath / track1}')
            continue
        try:
            with soundfile.SoundFile(dirpath / track2, mode="r") as f:
                data2 = f.read(_FRAMES_AT_BEGINNING)
        except soundfile.SoundFileError as e:
            errors.append(f'{e}: {dirpath / track2}')
            continue
        if data1.tobytes() in data2.tobytes():
            errors.append(str(dirpath / track1))
    return errors


def main():
    executor = futures.ThreadPoolExecutor()
    scan_futures = []
    for arg in sys.argv[1:]:
        for dirpath, _, filenames in pathlib.Path(arg).walk():
            scan_futures.append(executor.submit(_scan_dir, dirpath, filenames))
    for scan_future in scan_futures:
        for error in scan_future.result():
            print(error)


if __name__ == "__main__":
    main()
